I"Ø<p>All good. You wrote your first <a href="http://nodejs.org/">node</a> app using <a href="http://expressjs.com/">express</a> as your web application framework and everything looks amazing locally. Now the big question: how we deploy this live?</p>

<p>First of all, I had to do it in a <a href="http://www.digitalocean.com">DigitalOcean</a> VPS using Ubuntu 12.04 TLS, so my first idea was to install node using <code class="language-plaintext highlighter-rouge">apt-get install nodejs</code>. No problems at all, except that was an extremely old version. Node ecosystem is changing day by day so if you are not aware of that you can end with an edge version in development and a stable in production. To get then the latest version, I suggest to use <a href="https://launchpad.net/~chris-lea/+archive/node.js/">Chris Leaâ€™s repository</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo apt-get install python-software-properties
$ sudo apt-add-repository ppa:chris-lea/node.js
$ sudo apt-get update
$ sudo apt-get install nodejs
</code></pre></div></div>

<p>So far, so good. Next will be install <a href="https://npmjs.org">npm</a>, the node package manager with <code class="language-plaintext highlighter-rouge">apt-get install npm</code>.</p>

<p>Your node + express app will have a <code class="language-plaintext highlighter-rouge">package.json</code> file with all the project dependencies. In a good day doing <code class="language-plaintext highlighter-rouge">npm install</code> in your project root folder will be enough. <code class="language-plaintext highlighter-rouge">npm</code> on ubuntu has a differnt way to handle source repositories, so to be able to download all the dependencies we need to change an npm configuration setting.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm config set registry http://registry.npmjs.org
</code></pre></div></div>

<p>The above command will tell npm were to go to download dependencies then. Re-executing <code class="language-plaintext highlighter-rouge">npm install</code> will download then all the dependencies.</p>

<p>Fair enough. Our application will be running without problems at this point. Now is time to configure nginx to serve the app.</p>

<p>When using node + express, executing <code class="language-plaintext highlighter-rouge">node app.js</code> in the project root folder will be enough to server the app in <code class="language-plaintext highlighter-rouge">http://localhost:3000</code>. Now we need to do the same but as a service in our Ubuntu box. For this task Iâ€™ve used <code class="language-plaintext highlighter-rouge">upstart</code>. Creating an file <code class="language-plaintext highlighter-rouge">/etc/init/myapp.conf</code> with the following content will do the trick.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>description     "My Express App"

env HOME=/var/www/myexpressapp

start on runlevel [2345]
stop on runlevel [!2345]

respawn

env NODE_ENV=production
exec start-stop-daemon --start --umask 000 --exec /usr/bin/node -- /var/www/myexpressapp/app.js &gt;&gt;/var/log/myexpressapp.sys.log
</code></pre></div></div>

<p>Itâ€™s important to execute <code class="language-plaintext highlighter-rouge">env NODE_ENV=production</code> so the express app is able to run in production with different setting than development. In some <code class="language-plaintext highlighter-rouge">upstart</code> versions this command is not compatible. Excecuting then <code class="language-plaintext highlighter-rouge">service myapp start</code> will start the service.</p>

<p>Finally, we can create a virtual host in nginx to serve the app to the ouside world in a good way.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upstream nodejs {
      server 127.0.0.1:3000 max_fails=0; 
} 
server { 
  server_name mynodeapp.com; 

  add_header Strict-Transport-Security max-age=500; 

  location / { 
    proxy_pass  http://nodejs; 
    proxy_redirect off; 
    proxy_set_header Host $host ; 
    proxy_set_header X-Real-IP $remote_addr ; 
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; 
    proxy_set_header X-Forwarded-Proto https; 
  }     }
</code></pre></div></div>

<p>Like this, nginx is acting as a proxy with the express service.
Do not forget to set up logs at nginx level to see whatâ€™s going on!</p>

:ET